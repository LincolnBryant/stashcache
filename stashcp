#!/bin/bash

module load xrootd/4.1.1

usage="$(basename "$0") [-d] [-r] [-h] -s <source> [-l <location to be copied to>]

	-d: show debugging information
	-r: recursively copy
	-h: show this help text"

debug=0
file=""
loc="."
recursive=0
if [ "$#" -eq 0 ]; then
	echo "$usage"
	exit
fi

while getopts ":drhs:l:" opt; do
    case $opt in 
	h)
	    echo "$usage"
	    exit
	    ;;
	d)
	    debug=2
	    ;;
	s)
	    source=$OPTARG
	    ;;
	r)
	    recursive=1
	    ;;
	l)
	    loc=$OPTARG
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    echo "$usage" >&2
	    exit 1
	    ;;
    esac
done

#echo "$(date): Got opts"

if [ $debug -eq 2 ]; then
	xrdargs="-d 2 --nopbar"
else
	xrdargs="-s"
fi

#set prefix to proper format
if [[ $OSG_SITE_NAME == CIT* ]]; then
    STASHPREFIX="root://phiphi.t2.ucsd.edu"
    myprefix=$STASHPREFIX
elif [ ${#STASHPREFIX} -lt 3 ]; then
    myprefix="root://data.ci-connect.net"
	echo "Empty prefix"
else
	lcs=$(echo "${STASHPREFIX: -1}")
	if [ $lcs == "/" ]; then
		myprefix=$(echo $STASHPREFIX | rev | cut -c 2- | rev)
	else
		myprefix=$STASHPREFIX
	fi
fi
if [ $debug -eq 2 ]; then
    echo "I think my STASHPREFIX is $STASHPREFIX"
    echo "I think my prefix is $myprefix"
fi

#check to see if chosen path is a file or directory
#get size and appropriate time limit
#echo "xrdfs $myprefix stat $source"
dfsOut=$(xrdfs root://data.ci-connect.net stat $source)
isdir=$(xrdfs root://data.ci-connect.net stat $source | grep "IsDir" | wc -l)
sz=$(xrdfs root://data.ci-connect.net stat $source | grep "Size: " | cut -d':' -f2)
#if someone has 'Size: ' in their file path, they have bigger problems than this not working.
mb=$((sz/1000000))
tm=$((300+mb))
if [ $debug -eq 2 ]; then
	echo "Time limit is $tm s for $mb MB"
fi
if [ $isdir -eq 0 ]; then
	files=($source)
else
	files=$(xrdfs root://data.ci-connect.net ls $source)
	lc=$(echo "${source: -1}")
	if [ $lc == "/" ]; then
		dirname=$(echo $source | rev | cut -d/ -f2 | rev)
	else
		dirname=$(echo $source | rev | cut -d/ -f1 | rev)
	fi
	loc=$loc/$dirname
	mkdir -p $loc
fi

#try pulling from closest cache
#if xrdcp doesn't finish in the time allotted, stop
for file in ${files[@]}; do
	st1=$(date +%s%3N)
	echo "Pulling $file"
	fisdir=$(xrdfs root://data.ci-connect.net stat $file | grep "IsDir" | wc -l)
	if [ $fisdir -ne 0 ]; then
		if [ $recursive -eq 1 ]; then
			if [ $debug -eq 2 ]; then
				fl="-d"
			else
				fl=""
			fi
			bash ./stashcp $fl -s $file -l $loc 
		fi
		continue
	fi
	#size=$(xrdfs root://data.ci-connect.net stat $file | grep "Size:" | cut -d':' -f2)
	#timeout $tm xrdcp $xrdargs -f $myprefix://$file $loc 2>&1
	xrdcp $xrdargs -f $myprefix://$file $loc 2>&1
	res=$?
	dl1=$(date +%s%3N)
	##check to see if the pull worked, and file exists and has non-zero size
	##if not, pull from trunk
	myfile=$(echo $file | rev | cut -d/ -f1 | rev)
	#if [ $res -ne 0 ] || [ ! -s $loc/$myfile ]; then
	if [ $res -ne 0 ]; then
	    if [ $debug -eq 2 ]; then	
			#if [ $res -ne 0 ]; then
			#	echo "$myprefix timeout."
			#fi		
			echo "Pull of $file from $myprefix failed."
			echo "Command: xrdcp $xrdargs -f $myprefix://$file $loc 2>&1"
			echo "Trying to pull from trunk."
		fi
		st2=$(date +%s%3N)
		#timeout $tm xrdcp $xrdargs -f root://data.ci-connect.net://$file $loc 2>&1
		xrdcp $xrdargs -f root://data.ci-connect.net://$file $loc 2>&1
		res=$?
		dl2=$(date +%s%3N)
		#if [ $res -ne 0 ] || [ ! -s $loc/$myfile ]; then	
		if [ $res -ne 0 ]; then
	                #if [ $res -ne 0 ]; then
			#	echo "Trunk timeout."
			#fi			
			echo "Stashcp of $file failed."
			echo "Command: xrdcp $xrdargs -f root://data.ci-connect.net://$file $loc 2>&1"
		elif [ $debug -eq 2 ]; then
			echo "Pull from trunk was successful."
			#size=$(stat --printf="%s" $loc/$myfile)
			echo $st2
			echo $dl2
			dltm=$((dl2-st2))
			#echo -e "Source: root://data.ci-connect.net * File: $myfile * Time: $dltm ms * Size: $size B * Speed: $((size/dltm)) KBps"
			printf "Source: %s\tDestination: %s\tFile: %s\tTime: %s ms\tStart: %s\tSize: %s B\n" "root://data.ci-connect.net" "$OSG_SITE_NAME" "$myfile" "$dltm" "$st2" "$sz"
		fi
	elif [ $debug -eq 2 ]; then	
		#size=$(stat --printf="%s" $loc/$myfile)	
		echo "Pull of $myfile from $myprefix was successful."
		echo $st1
		echo $dl1
		dltm=$((dl1-st1))
		#echo -e "Source: $myprefix * File: $myfile * Time: $dltm ms * Size: $size B * Speed: $((size/dltm)) KBps"
		printf "Source: %s\tDestination: %s\tFile: %s\tTime: %s ms\tStart: %s\tSize: %s B\n" "$myprefix" "$OSG_SITE_NAME" "$myfile" "$dltm" "$st1" "$sz"
	fi
done
